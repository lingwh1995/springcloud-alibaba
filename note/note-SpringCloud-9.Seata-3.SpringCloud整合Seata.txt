1.修改pom.xml
    <!-- seata -->
    <dependency>
        <groupId>com.alibaba.cloud</groupId>
        <artifactId>spring-cloud-starter-alibaba-seata</artifactId>
        <exclusions>
            <exclusion>
                <groupId>io.seata</groupId>
                <artifactId>seata-spring-boot-starter</artifactId>
            </exclusion>
        </exclusions>
    </dependency>
    <dependency>
        <groupId>io.seata</groupId>
        <artifactId>seata-spring-boot-starter</artifactId>
        <version>1.4.2</version>
    </dependency>
2.yml文件中新增加如下内容
    seata:
      enabled: true
      application-id: seata_account
      # 客户端和服务端在同一个事务组
      tx-service-group: my_test_tx_group
      # 事务群组,配置项值为TC集群名,需要与服务端保持一致
      service:
        vgroup-mapping:
          my_test_tx_group: default
      #--------------------如果seata使用的nacos和当前项目使用的nacos是同一个,则不用配置下面代码:开始--------------------
      #整合nacos配置中心
      config:
        type: nacos
        nacos:
          server-addr: localhost:8848
          group: SEATA_GROUP
          data-id: seataServer.properties
          username: nacos
          password: nacos
      #整合nacos注册中心
      registry:
        type: nacos
        nacos:
          application: seata-server # 服务名,与服务端中registry.conf配置要一致
          server-addr: localhost:8848
          group: SEATA_GROUP
          # 默认TC集群名
          cluster: default
          username: nacos
          password: nacos
      #--------------------如果seata使用的nacos和当前项目使用的nacos是同一个,则不用配置下面代码:结束--------------------
3.编写代理数据源配置类
    @Configuration
    public class DataSourceProxyConfig {

        @Value("${mybatis.mapperLocations}")
        private String mapperLocations;

        @Bean
        @ConfigurationProperties(prefix = "spring.datasource")
        public DataSource druidDataSource(){
            return new DruidDataSource();
        }

        @Bean
        public DataSource dataSourceProxy(DataSource dataSource) {
            return new DataSourceProxy(dataSource);
        }

        @Bean
        public SqlSessionFactory sqlSessionFactoryBean(DataSource dataSourceProxy) throws Exception {
            SqlSessionFactoryBean sqlSessionFactoryBean = new SqlSessionFactoryBean();
            sqlSessionFactoryBean.setDataSource(dataSourceProxy);
            sqlSessionFactoryBean.setMapperLocations(new PathMatchingResourcePatternResolver().getResources(mapperLocations));
            sqlSessionFactoryBean.setTransactionFactory(new SpringManagedTransactionFactory());
            return sqlSessionFactoryBean.getObject();
        }

    }
4.修改主启动类注解@SpringBootApplication,增加exclude配置
    @SpringBootApplication(exclude = DataSourceAutoConfiguration.class)//取消数据源的自动创建
5.测试seata效果
    访问:
        http://localhost/order/create?userId=1&productId=1&count=10&money=100
    由于feign超时调用,所以会在调用account相关服务的时候报异常,浏览器页面会直接报错,seata会自动进行回滚