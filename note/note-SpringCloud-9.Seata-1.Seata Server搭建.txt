以1.4.2版本为准
    本地事务和seata事务的区别:
        本地事务只可以在同一台机器的同一个mysql中进行操作,seata事务可以跨机器进行事务控制
单机版:
1.修改registry.conf和file.conf中配置
    1>.进入seata-server-1.4.2\conf\registry.conf
        registry{
          #修改type为nacos
          type = "nacos"
          #修改nacos相关配置
          nacos {
            application = "seata-server"
            serverAddr = "localhost:8848"
            group = "SEATA_GROUP"
            namespace = ""
            cluster = "default"
            username = "nacos"
            password = "nacos"
          }
        }
        config{
          #修改type为nacos
          type = "nacos"
          #修改nacos相关配置
          nacos {
            application = "seata-server"
            serverAddr = "localhost:8848"
            group = "SEATA_GROUP"
            namespace = ""
            cluster = "default"
            username = "nacos"
            password = "nacos"
          }
        }
    2>.修改file.conf中配置(当开始事务时可以在数据库中查询到事务日志)
        修改mode为db
        修改数据库连接信息
2.修改file.conf
    进入seata-server-1.4.2\conf\file.conf
    store {
      #修改mode为db
      mode = "db"
      #修改数据库连接信息
      db {
        ## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp)/HikariDataSource(hikari) etc.
        datasource = "druid"
        ## mysql/oracle/postgresql/h2/oceanbase etc.
        dbType = "mysql"
        driverClassName = "com.mysql.cj.jdbc.Driver"
        ## if using mysql to store the data, recommend add rewriteBatchedStatements=true in jdbc connection param
        url = "jdbc:mysql://192.168.0.2:3306/seata?rewriteBatchedStatements=true"
        user = "mysql"
        password = "mysql"
        minConn = 5
        maxConn = 100
        globalTable = "global_table"
        branchTable = "branch_table"
        lockTable = "lock_table"
        queryLimit = 100
        maxWait = 5000
      }
    }
3.启动nacos
    配置管理->配置列表->新增
        Data ID: seataServer.properties
        SEATA_GROUP: SEATA_GROUP
    内容:
    transport.type=TCP
    transport.server=NIO
    transport.heartbeat=true
    transport.enableClientBatchSendRequest=false
    transport.threadFactory.bossThreadPrefix=NettyBoss
    transport.threadFactory.workerThreadPrefix=NettyServerNIOWorker
    transport.threadFactory.serverExecutorThreadPrefix=NettyServerBizHandler
    transport.threadFactory.shareBossWorker=false
    transport.threadFactory.clientSelectorThreadPrefix=NettyClientSelector
    transport.threadFactory.clientSelectorThreadSize=1
    transport.threadFactory.clientWorkerThreadPrefix=NettyClientWorkerThread
    transport.threadFactory.bossThreadSize=1
    transport.threadFactory.workerThreadSize=default
    #---------------------------
    transport.shutdown.wait=3
    service.vgroupMapping.my_test_tx_group=default
    #----service.后面的值和上面的default保持一致
    service.default.grouplist=localhost:8091
    service.enableDegrade=false
    service.disableGlobalTransaction=false
    #---------------------------
    client.rm.asyncCommitBufferLimit=10000
    client.rm.lock.retryInterval=10
    client.rm.lock.retryTimes=30
    client.rm.lock.retryPolicyBranchRollbackOnConflict=true
    client.rm.reportRetryCount=5
    client.rm.tableMetaCheckEnable=false
    client.rm.tableMetaCheckerInterval=60000
    client.rm.sqlParserType=druid
    client.rm.reportSuccessEnable=false
    client.rm.sagaBranchRegisterEnable=false
    client.tm.commitRetryCount=5
    client.tm.rollbackRetryCount=5
    client.tm.defaultGlobalTransactionTimeout=60000
    client.tm.degradeCheck=false
    client.tm.degradeCheckAllowTimes=10
    client.tm.degradeCheckPeriod=2000
    #---------------------------
    store.mode=db
    #---------------------------
    store.publicKey=
    store.file.dir=file_store/data
    store.file.maxBranchSessionSize=16384
    store.file.maxGlobalSessionSize=512
    store.file.fileWriteBufferCacheSize=16384
    store.file.flushDiskMode=async
    store.file.sessionReloadReadSize=100
    store.db.datasource=druid
    store.db.dbType=mysql
    #---------------------------
    store.db.driverClassName=com.mysql.cj.jdbc.Driver
    store.db.url=jdbc:mysql://192.168.0.2:3306/seata?useUnicode=true&rewriteBatchedStatements=true&serverTimezone=Asia/Shanghai
    store.db.user=root
    store.db.password=123456
    #---------------------------
    store.db.minConn=5
    store.db.maxConn=30
    store.db.globalTable=global_table
    store.db.branchTable=branch_table
    store.db.queryLimit=100
    store.db.lockTable=lock_table
    store.db.maxWait=5000
    store.redis.mode=single
    store.redis.single.host=127.0.0.1
    store.redis.single.port=6379
    store.redis.sentinel.masterName=
    store.redis.sentinel.sentinelHosts=
    store.redis.maxConn=10
    store.redis.minConn=1
    store.redis.maxTotal=100
    store.redis.database=0
    store.redis.password=
    store.redis.queryLimit=100
    server.recovery.committingRetryPeriod=1000
    server.recovery.asynCommittingRetryPeriod=1000
    server.recovery.rollbackingRetryPeriod=1000
    server.recovery.timeoutRetryPeriod=1000
    server.maxCommitRetryTimeout=-1
    server.maxRollbackRetryTimeout=-1
    server.rollbackRetryTimeoutUnlockEnable=false
    client.undo.dataValidation=true
    client.undo.logSerialization=jackson
    client.undo.onlyCareUpdateColumns=true
    server.undo.logSaveDays=7
    server.undo.logDeletePeriod=86400000
    client.undo.logTable=undo_log
    client.undo.compress.enable=true
    client.undo.compress.type=zip
    client.undo.compress.threshold=64k
    log.exceptionRate=100
    transport.serialization=seata
    transport.compressor=none
    metrics.enabled=false
    metrics.registryType=compact
    metrics.exporterList=prometheus
    metrics.exporterPrometheusPort=9898
4.进入bin目录,启动seata
5.注意事项:
    1>.启动顺序:
        nacos->seata->启动项目
    2>.启动项目后,在seata控制台就可以查看到注册seata中的RM信息
    3>.需要的sql脚本可以在seata源码项目中找,seata项目(非源码)是不含这些sql脚本的